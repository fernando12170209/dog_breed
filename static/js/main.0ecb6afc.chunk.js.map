{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["stateMachine","initial","states","on","next","loadingModel","awaitingUpload","ready","showImage","classifying","complete","showResult","reducer","currentstate","event","formatResult","className","probability","key","toFixed","App","useReducer","state","dispatch","useState","model","setModel","imageUrl","setImageUrl","results","setResults","imageRef","useRef","inputRef","buttonProps","text","action","a","mobilnet","mobilenetModel","current","click","classify","src","alt","ref","type","accept","capture","onChange","files","target","length","url","URL","createObjectURL","map","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"sMAMMA,G,YAAa,CACjBC,QAAQ,UACRC,OAAO,CACLD,QAAQ,CAAEE,GAAI,CAAEC,KAAK,iBACrBC,aAAa,CAAEF,GAAG,CAACC,KAAK,mBACxBE,eAAe,CAAEH,GAAG,CAACC,KAAK,UAC1BG,MAAM,CAAEJ,GAAG,CAAEC,KAAK,eAAeI,WAAU,GAC3CC,YAAa,CAAEN,GAAG,CAAEC,KAAK,aACzBM,SAAS,CAAEP,GAAG,CAACC,KAAK,kBAAkBI,WAAU,EAAMG,YAAW,MAK/DC,EAAU,SAACC,EAAcC,GAAf,OAAyBd,EAAaE,OAAOW,GAAcV,GAAGW,IAAUd,EAAaC,SAE/Fc,EAAa,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,UAAUC,EAAe,EAAfA,YAC7B,OACE,wBAAIC,IAAKF,GACRA,EAAY,KAAmB,IAAZC,GAAiBE,QAAQ,GAAI,MAgFtCC,EA1EH,WAAO,IAAD,EAEOC,qBAAWT,EAAQZ,EAAaC,SAFvC,mBAETqB,EAFS,KAEHC,EAFG,OAGOC,mBAAS,MAHhB,mBAGTC,EAHS,KAGHC,EAHG,OAIaF,mBAAS,MAJtB,mBAITG,EAJS,KAIAC,EAJA,OAKYJ,mBAAS,IALrB,mBAKTK,EALS,KAKAC,EALA,KAQVC,EAASC,mBACTC,EAASD,mBAET5B,EAAK,kBAAImB,EAAS,SAkClBW,EAAY,CAEhBjC,QAAQ,CAAEkC,KAAK,aAAcC,OAnChB,uCAAE,4BAAAC,EAAA,6DACfjC,IADe,SAEYkC,MAFZ,OAETC,EAFS,OAGfb,EAASa,GACTnC,IAJe,2CAAF,sDAoCbC,aAAa,CAAE8B,KAAK,oBAAqBC,OAAO,cAChD9B,eAAe,CAAE6B,KAAK,eAAgBC,OAAO,kBAAIH,EAASO,QAAQC,UAClElC,MAAM,CAAG4B,KAAK,WAAYC,OAnBd,uCAAC,4BAAAC,EAAA,6DACbjC,IADa,SAEOqB,EAAMiB,SAASX,EAASS,SAF/B,OAEPX,EAFO,OAIbC,EAAWD,GACXzB,IALa,2CAAD,sDAoBZK,YAAa,CAAE0B,KAAK,cAAeC,OAAO,cAC1C1B,SAAS,CAAEyB,KAAK,QAASC,OAdd,WACXN,EAAW,IACXF,EAAY,MACZxB,OAzCc,EAuD0BJ,EAAaE,OAAOoB,GAvD9C,IAuDTd,iBAvDS,aAuDQG,kBAvDR,SA0DhB,OACE,6BACGH,GAAW,yBAAMmC,IAAKhB,EAAUiB,IAAI,iBAAiBC,IAAKd,IAC3D,2BAAOe,KAAK,OAAOC,OAAO,UAAUC,QAAQ,SAASH,IAAKZ,EAAUgB,SA1CpD,SAAAnC,GAAS,IACpBoC,EAAOpC,EAAMqC,OAAbD,MACP,GAAGA,EAAME,OAAO,EAAE,CAEhB,IAAMC,EAAKC,IAAIC,gBAAgBL,EAAM,IACrCtB,EAAYyB,GAEZjD,QAoCCO,GACC,4BAEAkB,EAAQ2B,IAAIzC,IAGd,4BAAQ0C,QAASvB,EAAYZ,GAAOc,QAASF,EAAYZ,GAAOa,QCtFlDuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAc9D,MACrB+D,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0ecb6afc.chunk.js","sourcesContent":["import React ,{useReducer,useState ,useRef} from 'react';\nimport * as mobilnet from '@tensorflow-models/mobilenet';\nimport * as tf from'@tensorflow/tfjs';\n\nimport './App.css';\n\nconst stateMachine={\n  initial:'initial',\n  states:{\n    initial:{ on: { next:'loadingModel'}},\n    loadingModel:{ on:{next:'awaitingUpload'}},\n    awaitingUpload:{ on:{next:'ready'}},\n    ready:{ on:{ next:'classifying'},showImage:true},\n    classifying :{ on:{ next:'complete'}},\n    complete:{ on:{next:'awaitingUpload'},showImage:true, showResult:true}\n  }\n  \n}\n\nconst reducer = (currentstate, event) => stateMachine.states[currentstate].on[event] || stateMachine.initial;\n\nconst formatResult=({className,probability})=>{\n  return(\n    <li key={className}>\n    {className + ':' + (probability*100).toFixed(2)+ '%'}\n  </li>\n  );\n  \n};\n\nconst App = () => {\n  \n  const [state,dispatch]=useReducer(reducer,stateMachine.initial); \n  const [model,setModel]=useState(null);\n  const [imageUrl,setImageUrl]=useState(null);\n  const [results, setResults]=useState([]);\n  \n  \n  const imageRef=useRef();\n  const inputRef=useRef();\n\n  const next=()=>dispatch('next');\n  const loadModel= async ()=>{\n    next();\n    const mobilenetModel=await mobilnet.load();\n    setModel(mobilenetModel);\n    next();\n  }\n \n  const handleUpload =event =>{\n    const {files}=event.target;\n    if(files.length>0){\n      \n      const url= URL.createObjectURL(files[0]);\n      setImageUrl(url);\n      \n      next();\n    }\n  }\n\n  \n  const identify=async()=>{\n    next();\n    const results=await model.classify(imageRef.current);\n    \n    setResults(results);\n    next();\n  }\n  const reset= ()=>{\n    setResults([]);\n    setImageUrl(null);\n    next();\n\n  }\n\n  const buttonProps={\n    \n    initial:{ text:'Load Model', action: loadModel},\n    loadingModel:{ text:'Loading Model ...', action:()=>{}},\n    awaitingUpload:{ text:'Upload Photo', action:()=>inputRef.current.click()},\n    ready:{  text:'Identify', action: identify },\n    classifying :{ text:'Identifying', action:()=>{}},\n    complete:{ text:'Reset', action: reset}\n  }\n\n  const {showImage=false, showResult=false}=stateMachine.states[state];\n\n\n  return (\n    <div>\n      {showImage&&<img  src={imageUrl} alt=\"upload-preview\" ref={imageRef} ></img>}\n      <input type='file' accept=\"image/*\" capture=\"camara\" ref={inputRef} onChange={handleUpload} ></input>\n      {showResult&&\n        <ul>\n        {\n        results.map(formatResult)\n        }\n      </ul>}\n      <button onClick={buttonProps[state].action}>{buttonProps[state].text}</button>\n    \n  </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}